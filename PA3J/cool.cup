/*
 *  cool.cup
 *              Parser definition for the COOL language.
 *
 */

import java_cup.runtime.*;

/* Stuff enclosed in {: :} is copied verbatim to the class containing
all parser actions.  All the extra variables/functions you want to use
in the semantic actions should go here.  Don't remove or modify anything
that was there initially.  */

action code {: 

    int curr_lineno() {
	return ((CoolTokenLexer)parser.getScanner()).curr_lineno();
    }

    AbstractSymbol curr_filename() {
	return ((CoolTokenLexer)parser.getScanner()).curr_filename();
    }
:} 

/************************************************************************/
/*                DONT CHANGE ANYTHING IN THIS SECTION                  */

parser code {:
    int omerrs = 0;

    public void syntax_error(Symbol cur_token) {
        int lineno = action_obj.curr_lineno();
	String filename = action_obj.curr_filename().getString();
        System.err.print("\"" + filename + "\", line " + lineno + 
		         ": parse error at or near ");
        Utilities.printToken(cur_token);
	omerrs++;
	if (omerrs>50) {
	   System.err.println("More than 50 errors");
	   System.exit(1);
	}
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
    }
:}

/* Declare the terminals; a few have types for associated lexemes.  The
token ERROR is never used in the parser; thus, it is a parse error when
the lexer returns it.  */

terminal CLASS, ELSE, FI, IF, IN, INHERITS, LET, LET_STMT, LOOP, POOL, THEN, WHILE;
terminal CASE, ESAC, OF, DARROW, NEW, ISVOID;
terminal ASSIGN, NOT, LE, ERROR;
terminal PLUS, DIV, MINUS, MULT, EQ, LT, DOT, NEG, COMMA, SEMI, COLON;
terminal LPAREN, RPAREN, AT, LBRACE, RBRACE;
terminal AbstractSymbol STR_CONST, INT_CONST;
terminal Boolean BOOL_CONST;
terminal AbstractSymbol TYPEID, OBJECTID;

/*  DON'T CHANGE ANYTHING ABOVE THIS LINE, OR YOUR PARSER WONT WORK       */
/**************************************************************************/

   /* Complete the nonterminal list below, giving a type for the semantic
      value of each non terminal. (See the CUP documentation for details. */

nonterminal programc program;
nonterminal Classes class_list;
nonterminal class_c class;
nonterminal Features feature_list;
nonterminal Feature feature;

nonterminal Cases case_list;
nonterminal Case case;
nonterminal Expressions expr_list;
nonterminal Expressions params_list;
nonterminal Expression expr;
nonterminal Expression opt_init;
nonterminal Expression let_tail;

/* Precedence declarations go here. */
program	
	::= class_list:cl
	    {: RESULT = new programc(curr_lineno(), cl); :}
        ;

class_list
	/* single class */
	::= class:c
	    {: RESULT = (new Classes(curr_lineno())).appendElement(c); :}
	/* several classes */
	| class_list:cl class:c
	    {: RESULT = cl.appendElement(c); :}
	;

/* If no parent is specified, the class inherits from the Object class */
class
	::= CLASS TYPEID:n LBRACE feature_list:f RBRACE SEMI
	    {: RESULT = new class_c(curr_lineno(), n, 
		                   AbstractTable.idtable.addString("Object"), 
				   f, curr_filename()); :}
	| CLASS TYPEID:n INHERITS TYPEID:p LBRACE feature_list:f RBRACE SEMI
	    {: RESULT = new class_c(curr_lineno(), n, p, f, curr_filename()); :}
	;

feature_list
	::= /* empty */
	    {: RESULT = new Features(curr_lineno()); :}
	| feature:f
	  {: RESULT = (new Features(curr_lineno())).appendElement(f); :}
	| feature_list:fl feature:f
	  {: RESULT = fl.appendElement(f); :}
	;


feature
	::= OBJECTID:oid COLON TYPEID:tid SEMI
	    {: RESULT = new attr(curr_lineno(), oid, tid, new no_expr(curr_lineno())); :}
	| OBJECTID:oid COLON TYPEID:tid ASSIGN expr:e SEMI
	    {: RESULT = new attr(curr_lineno(), oid, tid, e); :}
	;

case_list
	::= case:c
	  {: RESULT = (new Cases(curr_lineno())).appendElement(c); :}
	| case_list:cl case:c
	  {: RESULT = cl.appendElement(c); :}
	;

case
	::= OBJECTID:oid COLON TYPEID:tid DARROW expr:e SEMI
	    {: RESULT = new branch(curr_lineno(), oid, tid, e); :}
	;

opt_init
	::= /* empty */
	    {: RESULT = new no_expr(curr_lineno()); :}
	| ASSIGN expr:init
	  {: RESULT = init; :}
	;

let_tail
	::= IN expr:e
	  {: RESULT = e; :}
	| COMMA OBJECTID:oid COLON TYPEID:tid opt_init:oinit let_tail:lt
	  {: RESULT = new let(curr_lineno(), oid, tid, oinit, lt); :}
	;

expr_list
	::= expr:e SEMI
            {: RESULT = (new Expressions(curr_lineno())).appendElement(e); :}
        | expr_list:el expr:e SEMI
            {: RESULT = el.appendElement(e); :}
        ;  

params_list
	::= /* empty */
	  {: RESULT = new Expressions(curr_lineno()); :}
	| expr:e
	  {: RESULT = (new Expressions(curr_lineno())).appendElement(e); :}
	| params_list:pl COMMA expr:e
	  {: RESULT = pl.appendElement(e); :}
	;

expr
	::= OBJECTID:oid ASSIGN expr:e
	  {: RESULT = new assign(curr_lineno(), oid, e); :}
	| expr:e AT TYPEID:tid DOT OBJECTID:oid LPAREN params_list:pl RPAREN
          {: RESULT = new static_dispatch(curr_lineno(), e, tid, oid, pl); :}
	| expr:e DOT OBJECTID:oid LPAREN params_list:pl RPAREN
          {: RESULT = new dispatch(curr_lineno(), e, oid, pl); :}
	| OBJECTID:oid LPAREN params_list:pl RPAREN
	  {:
	    Expression selfExpr = new object(curr_lineno(), TreeConstants.self); 
	    RESULT = new dispatch(curr_lineno(), selfExpr, oid, pl);
	  :}
	| IF expr:e1 THEN expr:e2 ELSE expr:e3 FI
	  {: RESULT = new cond(curr_lineno(), e1, e2, e3); :}
	| WHILE expr:e1 LOOP expr:e2 POOL
	  {: RESULT = new loop(curr_lineno(), e1, e2); :}
	| LBRACE expr_list:el RBRACE
	  {: RESULT = new block(curr_lineno(), el); :}
	| LET OBJECTID:oid COLON TYPEID:tid opt_init:oinit let_tail:t
	  {: RESULT = new let(curr_lineno(), oid, tid, oinit, t); :}
	| CASE expr:e OF case_list:cl ESAC
	  {: RESULT = new typcase(curr_lineno(), e, cl); :}
	| NEW TYPEID:tid
	  {: RESULT = new new_(curr_lineno(), tid); :}
	| ISVOID expr:e
	  {: RESULT = new isvoid(curr_lineno(), e); :}
	| expr:e1 PLUS expr:e2
	  {: RESULT = new plus(curr_lineno(), e1, e2); :}
	| expr:e1 MINUS expr:e2
	  {: RESULT = new sub(curr_lineno(), e1, e2); :}
	| expr:e1 MULT expr:e2
	  {: RESULT = new mul(curr_lineno(), e1, e2); :}
	| expr:e1 DIV expr:e2
	  {: RESULT = new divide(curr_lineno(), e1, e2); :}
	| NEG expr:e
	  {: RESULT = new neg(curr_lineno(), e); :}
	| expr:e1 LT expr:e2
	  {: RESULT = new lt(curr_lineno(), e1, e2); :}
	| expr:e1 LE expr:e2
	  {: RESULT = new leq(curr_lineno(), e1, e2); :}
	| expr:e1 EQ expr:e2
	  {: RESULT = new eq(curr_lineno(), e1, e2); :}
	| NOT expr:e
	  {: RESULT = new comp(curr_lineno(), e); :}
	| LPAREN expr:e RPAREN
	  {: RESULT = e; :}
	| OBJECTID:oid
	  {: RESULT = new object(curr_lineno(), oid); :}
	| INT_CONST:ic
	  {: RESULT = new int_const(curr_lineno(), ic); :}
	| STR_CONST:sc
	  {: RESULT = new string_const(curr_lineno(), sc); :}
	| BOOL_CONST:bc
	  {: RESULT = new bool_const(curr_lineno(), bc); :}
	;